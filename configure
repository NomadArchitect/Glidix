#! /bin/sh
export GLIDIX_VERSION="0.1"

sysroot="/"
srcdir="`dirname $0`"
build="`gcc -dumpmachine`"

if [ "$srcdir" = "." ]
then
	echo >&2 "$0: error: cannot build in the source directory"
	exit 1
fi

echo >config.log "configure command: $0 $@"

mkdir -p modconf

moddirs="`ls -d $srcdir/modules/*`"
MODULES=""

for modname in $moddirs
do
	if [ "`basename $modname`" != "subconf.sh" ]
	then
		MODULES="$MODULES `basename $modname`"
	fi
done

# enable all modules by default
for modname in $MODULES
do
	echo >modconf/$modname "enable"
done

assert_module()
{
	for modname in $MODULES
	do
		if [ "$modname" = "$1" ]
		then
			return
		fi
	done
	
	echo >&2 "$0: unknown module: $1"
	exit 1
}

assert_mod_setting()
{
	if [ "$1" = "initmod" ]
	then
		return
	fi
	
	if [ "$1" = "enable" ]
	then
		return
	fi
	
	if [ "$1" = "disable" ]
	then
		return
	fi
	
	echo >&2 "$0: invalid module setting: $1"
	exit 1
}

maybe_gxsetup=""
maybe_binutils=""
maybe_gxboot=""
maybe_gcc=""

binutils_version="2.38"
gcc_version="11.4.0"

heap_mode="slab"

diskimg_target="no"
expanded_options=""

# expand options such as "--iso"
for i in "$@"
do
case $i in
	# TODO: enable binutils and gcc in the diskimg, and also remove iso.
	--iso)
		expanded_options="$expanded_options --module-gxfs=initmod --module-isofs=initmod --module-sdide=initmod --module-sdahci=initmod --module-ehci=initmod --enable-gxsetup --enable-binutils --enable-gxboot --enable-gcc"
		diskimg_target="yes"
		;;
	--diskimg)
		expanded_options="$expanded_options --module-gxfs=initmod --module-isofs=initmod --module-sdide=initmod --module-sdahci=initmod --enable-gxboot"
		diskimg_target="yes"
		;;
	*)
		expanded_options="$expanded_options $i"
		;;
esac
done

for i in $expanded_options
do
case $i in
	--help)
		cat >&2 "$srcdir/configure.help"
		exit 1
		;;
	
	--sysroot=*)
		sysroot=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
		;;
	
	--module-*=*)
		modpart=`echo $i | sed 's/--module-//'`
		setting=`echo $modpart | sed 's/[-a-zA-Z0-9]*=//'`
		modname=`echo $modpart | cut -f1 -d"="`
		assert_module $modname
		assert_mod_setting $setting
		echo >modconf/$modname $setting
		;;
	
	--enable-gxsetup)
		maybe_gxsetup="gxsetup"
		;;
	
	--disable-gxsetup)
		maybe_gxsetup=""
		;;
		
	--enable-binutils)
		maybe_binutils="binutils"
		;;
	
	--disable-binutils)
		maybe_binutils=""
		;;
	
	--binutils-version=*)
		binutils_version=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
		;;
	
	--enable-gxboot)
		maybe_gxboot="gxboot"
		;;
	
	--disable-gxboot)
		maybe_gxboot=""
		;;
	
	--enable-gcc)
		maybe_gcc="gcc"
		;;
	
	--disable-gcc)
		maybe_gcc=""
		;;
	
	--gcc-version=*)
		gcc_version=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
		;;
	
	--heap=*)
		heap_mode=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
		;;
		
	*)
		echo >&2 "$0: unrecognised command-line option '$i'"
		echo >&2 "run '$0 --help' for more information"
		exit 1
esac
done

# targets
# NOTE: Those need to be in order; a target must come AFTER all the targets that it depends on.
TARGETS="kernel build-tools libc dynld libz libgpm shutils init modules sh $maybe_gxsetup $maybe_binutils $maybe_gcc sysman $maybe_gxboot libpng freetype libddi libgl fstools libgwm gwmserver guiapps netman klogd sysinfo filemgr minipad gxdbg ddi-drivers"

# determine build parameters
export GLIDIX_SYSROOT="$sysroot"
export BUILD_GCC="$build-gcc"
export HOST_GCC="x86_64-glidix-gcc"
export HOST_AS="x86_64-glidix-as"
export HOST_AR="x86_64-glidix-ar"
export HOST_RANLIB="x86_64-glidix-ranlib"
export GLIDIX_BINUTILS_VERSION="$binutils_version"
export GLIDIX_GCC_VERSION="$gcc_version"

# sanity checks
test_command()
{
	printf >&2 "checking if %s exists... " $1
	command -v $1 >>config.log 2>&1 || {
		echo >&2 "not found"
		echo >&2 "$0: error: $1 not found"
		exit 1
	}
	
	echo >&2 "OK"
}

test_command $BUILD_GCC
test_command $HOST_GCC
test_command $HOST_AS
test_command $HOST_AR
test_command $HOST_RANLIB
test_command nasm
test_command wget
test_command tar

for target in $TARGETS
do
	echo >&2 "configuring $target..."
	mkdir -p $target
	cd $target
	../$srcdir/$target/subconf.sh || exit 1
	cd ..
done

echo "generating glidix-config.h..."
echo '#ifndef __glidix_config' > glidix-config.h
echo '#define __glidix_config' >> glidix-config.h
if [ "$heap_mode" = "block" ]
then
	echo '#define __CONFIG_HEAP_BLOCK' >> glidix-config.h
elif [ "$heap_mode" = "slab" ]
then
	echo '#define __CONFIG_HEAP_SLAB' >> glidix-config.h
fi
echo '#endif' >> glidix-config.h

echo "generating Makefile..."
echo >Makefile ".PHONY: all install clean mip tests $TARGETS"

DISKIMG_PACKAGES="libz libgpm shutils libc modules sh gxboot dynld gxdbg gwmserver libddi libgl libgwm guiapps minipad sysinfo filemgr freetype libpng fstools ddi-drivers"
if [ "$diskimg_target" = "yes" ]
then
	mkdir -p imgdir
	echo >>Makefile "IMGDIR := `realpath imgdir`"
	echo >>Makefile "glidix.img: all"
	echo >>Makefile "	@rm -rf imgdir"
	echo >>Makefile "	@mkdir -p imgdir"
	echo >>Makefile "	@mkdir -p imgdir/boot"
	echo >>Makefile "	bash $srcdir/initrd.sh imgdir/boot"
	
	for pkg in $DISKIMG_PACKAGES
	do
		echo >>Makefile "	cd $pkg && DESTDIR=\$(IMGDIR) make install"
	done
	
	echo >>Makefile "	rm imgdir/usr/lib/libz.so imgdir/usr/lib/libz.so.1"
	echo >>Makefile "	cp imgdir/usr/lib/libz.so.* imgdir/usr/lib/libz.so.1"
	echo >>Makefile "	cp imgdir/usr/lib/libz.so.1 imgdir/usr/lib/libz.so"
	echo >>Makefile "	@mkdir -p imgdir/usr/share/pkg"
	echo >>Makefile "	PKGDIR=imgdir/usr/share/pkg make mip"
	echo >>Makefile "	mkdir -p imgdir/var/run"
	echo >>Makefile "	mkdir -p imgdir/run"
	echo >>Makefile "	mkdir -p imgdir/sys/mod"
	echo >>Makefile "	mkdir -p imgdir/proc"
	echo >>Makefile "	mkdir -p imgdir/boot"
	echo >>Makefile "	mkdir -p imgdir/etc"
	echo >>Makefile "	mkdir -p imgdir/usr/bin"
	echo >>Makefile "	mkdir -p imgdir/root"
	echo >>Makefile "	mkdir -p imgdir/dev"
	echo >>Makefile "	mkdir -p imgdir/mnt"
	echo >>Makefile "	mkdir -p imgdir/initrd"
	echo >>Makefile "	echo 'display /dev/bootfb0' > imgdir/etc/gwm.conf"
	echo >>Makefile "	echo 'resolution auto' >> imgdir/etc/gwm.conf"
	echo >>Makefile "	echo 'log /run/gwm.log' >> imgdir/etc/gwm.conf"
	echo >>Makefile "	cp $srcdir/gwm-live-start.sh imgdir/usr/bin/gwm-live-start.sh"
	echo >>Makefile "	cp gxboot/eltorito.img imgdir/boot/loader.sys"
	echo >>Makefile "	bash $srcdir/scripts/make-diskimg.sh imgdir \$@"
fi

echo >>Makefile "all: $TARGETS"

echo >>Makefile "install: install-libc install-kernel install-modules install-shutils install-sh"

for target in $TARGETS
do
	echo >>Makefile "$target: build-tools"
	echo >>Makefile "	@cd $target && make"
done

for target in $TARGETS
do
	if [ "$target" != "kernel" ]
	then
		echo >>Makefile ".PHONY: install-$target"
		echo >>Makefile "install-$target:"
		echo >>Makefile "	cd $target && DESTDIR=$GLIDIX_SYSROOT make install"
	fi
done

echo >>Makefile "clean:"
for target in $TARGETS
do
	echo >>Makefile "	rm -rf $target"
done

echo >>Makefile "	rm -r Makefile config.log modconf imgdir"

echo >>Makefile "install-kernel:"
echo >>Makefile "	@mkdir -p $GLIDIX_SYSROOT/boot"
echo >>Makefile "	sh $srcdir/initrd.sh $GLIDIX_SYSROOT/boot/vmglidix.tar"

echo >>Makefile "PKGDIR ?= pkg"
if [ "$maybe_binutils" = "binutils" ]
then
	echo >>Makefile "MIP_BINUTILS := yes"
else
	echo >>Makefile "MIP_BINUTILS := no"
fi

if [ "$maybe_gcc" = "gcc" ]
then
	echo >>Makefile "MIP_GCC := yes"
else
	echo >>Makefile "MIP_GCC := no"
fi

echo >>Makefile "mip:"
echo >>Makefile "	export MIP_BINUTILS=\$(MIP_BINUTILS) export MIP_GCC=\$(MIP_GCC) export GLIDIX_VERSION=$GLIDIX_VERSION && sh $srcdir/mip.sh \$(PKGDIR)"
echo >>Makefile "tests:"
echo >>Makefile "	sh $srcdir/tests.sh"

echo "*** CONFIGURATION SUMMARY ***"
echo "Build environment:	$build"
echo "System root:		$sysroot"

